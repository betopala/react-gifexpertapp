{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","c","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAK1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAGGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAACS,GAAD,OAASP,GAAT,mBAAyBO,OACxCN,EAAc,MAKlB,SAII,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAxBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCVdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAWH,GAF9C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAeZM,GAfY,4CAAH,sDCAXO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGhC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCFCO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAMrB,ECN0B,SAAEA,GAE5B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KA8BA,OAzBAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GAKCH,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAGf,OAGX,CAACpB,IASGqB,ED1B0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAWrB,OAMI,cALA,CAKA,sBACCA,EAAU,mBAAGJ,UAAW,wCAAd,qBAAoE,qBAAIA,UAAW,+DAAf,cAAkFhB,EAAlF,OAE9EoB,GAAW,mBAAGJ,UAAW,wCAAd,qBACZ,qBAAKA,UAAU,aAAf,SAGYH,EAAOJ,KAAM,SAACC,GAAD,OAET,cAAC,EAAD,eAESA,GADAA,EAAIC,aEuBtBgB,EAvDM,WAEjB,MAAoCzC,mBAAS,CAAE,cAA/C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAsBA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAUA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCzClC6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.5a0eb625.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories} ) => {\r\n\r\n    //console.log(typeof(setCategories));\r\n    // console.log(AddCategory);\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n        // console.log(e.target.value);\r\n        // console.log(inputValue);\r\n\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // console.log('Submit hecho');\r\n        // console.log(inputValue);\r\n        if ( inputValue.trim().length > 2 ) {\r\n            setCategories( (c) => [ inputValue , ...c ] ); \r\n            setInputValue('');\r\n        };\r\n\r\n    }\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            {/* <h1>{inputValue}</h1> */}\r\n            {/* <h2>Add Category</h2> */}\r\n\r\n            <input\r\n                type=\"text\"\r\n                value={ inputValue}\r\n                onChange={ handleInputChange }\r\n            />\r\n\r\n\r\n\r\n        </form>\r\n    )\r\n\r\n\r\n};\r\n\r\nAddCategory.propTypes = {\r\n     setCategories: PropTypes.func.isRequired,\r\n}","\r\n\r\n    export const getGifs = async( category ) => {\r\n\r\n        const url= `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=u6skGkfUdeKrPhwB7Fs8TBT38MspH6Iw`\r\n        const resp = await fetch( url );\r\n        const { data } = await resp.json();\r\n\r\n        const gifs = data.map( img => {\r\n            return {\r\n                id: img.id,\r\n                title: img.title,\r\n                url: img.images?.downsized_medium.url \r\n\r\n            }\r\n        })\r\n\r\n        return gifs;\r\n\r\n\r\n    }","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n    // console.log(id, title, url);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\" >\r\n            <img src={ url } alt={ title } />\r\n            <p> { title } </p>\r\n            {/* { img.title } */}\r\n        </div>\r\n    )\r\n}\r\n","// import React, { useState, useEffect } from 'react'\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\n//import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    // const [count, setCount] = useState(0);\r\n\r\n    // const [images, setImages] = useState([]);\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    // useEffect( () => {\r\n    //     getGifs( category )\r\n    //         // .then( imgs => setImages( imgs ) )\r\n    //         .then( setImages );\r\n    // }, [ category ] )\r\n\r\n \r\n\r\n    // getGifs();\r\n    return (\r\n        // <>\r\n        // <h3> { category } </h3>\r\n        // { loading ? 'Cargando...' : 'Data cargada' }\r\n        // </>\r\n        \r\n        <>\r\n        {loading ? <p className= \"card animate__animated animate__flash\">Loading</p> : <h3 className= \"card animate__animated animate__fadeInDown animate__delay-1s\" > { category } </h3>}\r\n        {/* <h3 className= \"card animate__animated animate__fadeIn\" > { category } </h3> */}\r\n        {loading && <p className= \"card animate__animated animate__flash\">Loading</p>  }\r\n        <div className=\"card-grid \">\r\n\r\n                { \r\n                    images.map ( (img) => (\r\n\r\n                        <GifGridItem \r\n                            key={img.id }\r\n                            { ...img } \r\n                        />\r\n\r\n                        // <li key={id}>{title}</li>\r\n                    ))\r\n                } \r\n\r\n            {/* <h3> { count } </h3>\r\n            <button onClick={ () => setCount(count + 1) } > </button> */}\r\n            \r\n        </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n  \r\n  \r\n  \r\n  export const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                // setTimeout( () => {\r\n\r\n                    // console.log(imgs);\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n\r\n                },3000)\r\n            // })\r\n\r\n    }, [category])\r\n\r\n    // setTimeout( () => {\r\n    //     setState({\r\n    //         data: [1,2,3,4,5,6,7],\r\n    //         loading: false\r\n    //     })\r\n    // }, 3000 );\r\n\r\n    return state; // { data:[], loading: true };\r\n\r\n  }\r\n  ","\r\nimport React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n//let i = 0\r\n\r\nconst GifExpertApp = () => {\r\n    \r\n    const [categories, setCategories] = useState([ 'One Punch' ]);\r\n    // console.log(categories, setCategories);\r\n    // const series = [ 'Mortal Combat', 'Terminator', 'Matrix'];\r\n    // series.push('Mortal');\r\n    // console.log(series);\r\n    \r\n    // const handleAdd = (e) => {\r\n        // categories.push('hunter');\r\n        // setCategories( 'hunter' );\r\n        // console.log(categories);\r\n        \r\n        //setCategories( (c) => ['hunter', ...c] );\r\n        \r\n        // if ( i < series.length) {setCategories([...categories, series[i]])};\r\n        // i++;\r\n        \r\n        //return 1\r\n        //return ()=> console.log('Hola Mundo'); //en la llamada de la funcion con '()' debo retornar otra funcion con return \r\n\r\n    //}\r\n        //  console.log(setCategories);\r\n\r\n    return (\r\n        <>    \r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr/>\r\n            {/* <button onClick = { function(e)  {console.log(+1)} }>Agregar</button> */}\r\n            {/* arriba realizo la funcion en la misma linea */}\r\n            {/* <button onClick = { (e) => {handleAdd(e)} }>Agregar</button> */} \r\n            {/* arriba paso un argumento en particular '(e)' a handler*/}\r\n            {/* <button onClick={ handleAdd() }>Agregar</button> */}\r\n            {/* arriba cuando llamo con '()' debe retornar otra funcion */}\r\n            {/* <button onClick={ handleAdd }>Agregar</button>  */}\r\n            {/* arriba hago referencia de la funcion ('sin ()') para que se dispre cuando se haga click */}\r\n            \r\n            <ol>\r\n                {\r\n                    categories.map( category =>(  \r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category } \r\n                        />\r\n                        // <li key={ category }> { category } </li>\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    );\r\n};\r\n\r\n\r\nexport default GifExpertApp;\r\n\r\n// snipet para crear un funcional component rafc","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}